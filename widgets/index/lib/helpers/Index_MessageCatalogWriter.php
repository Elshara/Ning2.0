<?php
/**
 * Parses the PHP and JavaScript translation files ("message catalogs").
 */
class Index_MessageCatalogWriter {

    /** Regular expression for a valid name in the PHP message catalog, e.g., N_COMMENTS*/
    const PHP_MESSAGE_CATALOG_NAME_PATTERN = '@^[A-Z0-9_]+$@u';

    /**
     * Generates I18N code for PHP and JavaScript.
     *
     * @param $locale string  locale code for the translation, e.g., fr_CA
     * @param $data array  the data, with keys being the message names (e.g. "POPULAR_MEMBERS",
     * "xg.forum.nls.deleteCategory", "SPECIAL RULES", "TAB NAMES") and values being a string or JavaScript
     * function code
     * @return array  code for the PHP file and the JavaScript file
     */
    public function write($locale, $data) {
        W_Cache::getWidget('main')->includeFileOnce('/lib/helpers/Index_LanguageHelper.php');
        $javaScriptPackageMappings = array();
        $phpMappings = array();
        foreach ($data as $name => $text) {
            // Don't turn nulls (unspecified texts) into empty strings, as empty strings override the default en_US strings.
            // If the user has explicitly cleared a field, it will be an empty string rather than null.  [Jon Aquino 2007-08-10]
            if (is_null($text)) { continue; }
            $text = trim($text);
            if ($name == Index_LanguageHelper::SPECIAL_RULES_KEY) {
                $specialRules = $text;
            } elseif ($name == Index_LanguageHelper::TAB_NAMES_KEY) {
                $tabNames = $text;
            } elseif (preg_match('@(^xg\..*)\.([a-z0-9_]+)$@iu', $name, $matches)) {
                $javaScriptPackageMappings[$matches[1]][$matches[2]] = $text;
            } elseif (preg_match(self::PHP_MESSAGE_CATALOG_NAME_PATTERN, $name)) {
                $phpMappings[$name] = $text;
            } else {
                // Can get here for names containing punctuation (e.g. "COMMENTS:").
                // These are no longer valid, but may be present in uploaded catalogs.
                // Ignore it. [Jon Aquino 2007-08-20]
            }
        }
        $require = "XG_App::includeFileOnce('" . preg_replace('@.*/lib/@u', '/lib/', XG_LanguageHelper::phpCatalogPath(XG_LanguageHelper::baseLocale($locale))) . "');";
        $extends = 'extends ' . str_replace('.php', '', basename(XG_LanguageHelper::phpCatalogPath(XG_LanguageHelper::baseLocale($locale))));
        $php = '<?php

' . $require . '

/**
 * Texts for the ' . $locale . ' locale. This file was generated by the Manage > Language page.
 */
class XG_CustomMessageCatalog_' . $locale . ' ' . $extends . ' {

    /**
     * Returns a localized version of a string. The first argument is the message name, e.g., \'ADD_A_PHOTO\'.
     * Subsequent arguments are substitution values (if the message contains sprintf format elements).
     *
     * @param $args array the message name, plus optional substitution values
     * @return string the localized string
     * @see xg_html()
     */
    public static function text($args) {
        $s = $args[0];
        ' . $specialRules .'
        $text = self::$messages[$s];
        if ($text) { $args[0] = $text; }
        return @call_user_func_array(\'sprintf\', $args);
    }

    /**
     * Message names and texts. Use UTF-8 byte sequences instead of HTML entities, e.g., & instead of &amp;, … instead of &hellip;
     */
    private static $messages = array(
' . self::serializePhp($phpMappings) .
'    );

    /**
     * If the given widget title is the default English title for the widget,
     * translate it into the current language.
     *
     * @param $widgetTitle string  The title of the widget
     * @return string  A translated title if the title is the English default; otherwise, the title unchanged
     */
    public static function translateDefaultWidgetTitle($widgetTitle) {
        ' . $tabNames . '
        return $widgetTitle;
    }

}';
        $javaScript = 'dojo.provide(\'xg.custom.shared.messagecatalogs.' . $locale . '\');

dojo.require(\'xg.index.i18n\');

/**
 * Texts for the ' . $locale . ' locale. This file was generated by the Manage > Language page.
 */
// Use UTF-8 byte sequences instead of HTML entities, e.g., & instead of &amp;, … instead of &hellip;  [Jon Aquino 2007-01-10]';
        foreach ($javaScriptPackageMappings as $package => $javaScriptMappings) {
            $javaScript .= '


dojo.evalObjPath(\'' . $package . '\', true);
dojo.lang.mixin(' . $package . ', xg.index.i18n, {
' . self::serializeJavaScript($javaScriptMappings) . '
});';
        }
        return array($php, $javaScript);
    }

    /**
     * Converts the mappings into code for a PHP array.
     *
     * @param $messages array  message names and texts
     * @return string  PHP code, e.g., 'FOO' => 'Foo', 'BAR' => 'Bar'
     */
    private function serializePhp($messages) {
        $result = '';
        foreach ($messages as $name => $text) {
            $result .= "        '" . $name . "' => '" . $this->addSlashes(trim($text)) . "',\n";
        }
        return $result;
    }

    /**
     * Converts the mappings into code for a JavaScript array.
     *
     * @param $messages array  message names and texts
     * @return string  JavaScript code, e.g., foo: 'Foo', bar: 'Bar'
     */
    private function serializeJavaScript($messages) {
        $result = '';
        foreach ($messages as $name => $text) {
            if ($name == 'delete') { $name = "'delete'"; }
            $text = trim($text);
            if (mb_strpos($text, 'function') === 0) {
                $text = trim(preg_replace('@}[^}]*$@su', '}', $text));
                $result .= "    " . $name . ": " . $text . ",\n";
            } else {
                $result .= "    " . $name . ": '" . $this->addSlashes(str_replace("\r", " " , str_replace("\n", " ", $text))) . "',\n";
            }
        }
        $result = preg_replace('@,[^,]*$@su', '', $result);
        return $result;
    }

    /**
     * Adds a backslash before single quotes and backslashes.
     *
     * @return  the escaped string
     */
    protected function addSlashes($s) {
        return str_replace("'", "\\'" , str_replace('\\', '\\\\', $s));
    }

}
